#!/usr/bin/env bash

# change these values as per needed

# path of config directory
configdir="$HOME/.config"
# where files are stored while backup is being generated
tmpbckup="/tmp/bckup" 
# the backup tar.gz file name
bckupfile="bckup-laptop-$(date +%Y-%m-%d_%H.%M.%S_TZ%z).tar.gz" 
# the signed gzip of the file with .sig inside 
signedbckupfile="signed-$bckupfile" 
# the name of the detached .sig
bckupfilesig="$bckupfile.sig" 
# path of config file
configfile="$configdir/bcktousb/bcktousb_config"
# path of exclude list , refer to rsync --exclude-from for format
ignorefile="$configdir/bcktousb/excludelist" 
# path of track list for list of files and folders to store in backup, format same as .gitignore
trackfile="$configdir/bcktousb/tracklist"
# key name to sign it with
gpgkeyname="defaultkey" 
# enable checking pckglist [yes/no]
enableEtclistcheck="no"  # Arch + Pacmnan only for now


# some internal global params below
file_a_bug_request="please file a bug at https://github.com/teito-dev/bcktousb"

function main 
{
parseParams "$@" || report_a_bug 3
makeChecks || report_a_bug 1 # does checking before proceed, and aborts if needed
clean_temp_folder || {
    echo "couldnt clean temp folder";exit -2
} # clean temp folder
generate_bcklocks_list || report_a_bug 2 # fills bcklocks array with files/folders to track
echo "The locations marked for backing are: ${bcklocs[*]}"
store_files_in_tmp || {
    echo "error with storing files under tmp";exit -3
} # creates a folder under /tmp directory to store data
generate_archive || {
    echo "error while generating archive , if you feel its a bug
$file_a_bug_request";exit -4
} # generates archive with all the data under /tmp
clean_all_files || {
    echo "error while cleaning all files, if you feel its a bug
$file_a_bug_request";exit -5
} # cleans /tmp folder for bckup and other files

# ending message
echo -e "\nBackup Generated , please rcp it over to safe location"
}


# ---------         SCRIPT ENDED            -----------
# --------- ONLY INTERNAL FUNCTION DEFINITIONS BELOW -----------

function makeChecks
{

# check if bcktousb folder exist under .config
if [ ! -f $ignorefile ] && [ ! -f $trackfile ] ; then
    echo "Initializing config files, script ran for first time";
    init_config || report_a_bug 29
fi

# check if a backup already has been made today
if [ -f $signedbckupfile ] ; then
    echo "backup from today already present under current folder 
please remove it first";
    exit -1;
fi

# check if tracklist are not created
if [ ! -s $trackfile ]; then
    echo "tracklist is empty under: $trackfile";
    exit -2;
fi

# check dependencies
dependence_list=(
    gpg
    which
    tar
    rsync
    )

for x in ${dependence_list[@]};
do 
    is_installed=$(which $x)
    if  [ ! $? -eq 0 ];then
        echo "Error: $x not installed";
    fi
done

}

# ------

function init_config
{
# --- generate config folder if doesnt exist
if [ ! -d "$configdir/bcktousb" ] ; then
    mkdir "$configdir/bcktousb"
fi
# -- generate config conf file with default values
if [ ! -f $configfile ];then
    cp /usr/local/share/bcktousb/bcktousb_config $configfile
fi
# --- generate tracklist and ignore list
touch $ignorefile;
touch $trackfile;
}

# ------

function clean_temp_folder
{
# --- delete /tmp/backup if present and then create it
if [ -d $tmpbckup ] ; then
    rm -rf $tmpbckup;
fi

mkdir $tmpbckup
}

# ------

function generate_bcklocks_list
{
# Calculating list of /etc files modified from stock
if [ $enableEtclistcheck == "yes" ]; then
    echo "Calculating list of modified /etc files to backup";
    readarray -td' ' pckglist < <(pacman -Qii | awk '/^MODIFIED/ {print $2}' | tr '\n' ' ');
fi

# reading list of files/folders to take backup of from trackfile
readarray -td' ' tracklocs < <(cat $trackfile | tr '\n' ' ' | tr -s [:space:] ' ')

# merging two for final backup locations
rawbcklocs=( "${tracklocs[@]}" "${pckglist[@]}")

bcklocs=$(eval echo ${rawbcklocs[@]})
}

# ------

function store_files_in_tmp
{
for i in ${bcklocs[@]};
do 
    echo "bcking up $i";
    if [ -s $ignorefile ]; then
        rsync -r --relative --info=progress2 --exclude-from $ignorefile $i $tmpbckup; # rsync's all the bcklocs to /tmp/bckup
    else
        rsync -r --relative --info=progress2 $i $tmpbckup; # rsync's all the bcklocs to /tmp/bckup
    fi

done
}


# -----

function generate_archive
{
echo "creating archive"
tar czf $bckupfile --directory=$tmpbckup . ; # tars and gzip the entire /tmp/bckup folder


echo "signing the backup file"
gpg -s -b -u "$gpgkeyname" $bckupfile || { 
    echo "gpg error, make sure gpgkeyname in config or params 
is set correctly" ; exit -42 
} # sign the backup generated , exits if failed

echo "creating backup package"
# tar the signature and the gzip file together
tar cf $signedbckupfile $bckupfile $bckupfilesig  
}

# -----

function clean_all_files
{
echo "cleaning all temp files"
# clean all files except the bckup
rm -rf $tmpbckup
rm $bckupfile
rm $bckupfilesig
}

# -----

function parseParams
{
    if [[ $1 == "clean" ]];then
        echo "Cleaning tmp directory"
        if [ -d $tmpbckup ] ; then
            rm -rf $tmpbckup || {
                echo "error deleting directory"; exit -202
            }
            echo "cleaned";
            exit 0;
        else
            echo "ERROR: temp directory does not exist";
            exit -203;
        return 204;
        fi
    elif [[ $1 == "-h" ]];then
        echo "bcktousb version 0.2 

bcktousb is a backup script to simplify taking backups

commands:
clean: cleans the temp directory
-h: shows these messages
No params passed: just takes backups"
        exit 0;
    fi
}

# -----

function report_a_bug
{

if [ $1 -eq 1 ]; then
    echo "ERROR: checks failed ! 
$file_a_bug_request"
elif [ $1 -eq 2]; then
    echo "ERROR: failed while generating list of files to backup
$file_a_bug_request"
elif [ $1 -eq 3]; then
    echo "ERROR: failed while cleaning , this should not happen
$file_a_bug_request"
fi

exit -401; # exited after reporting a bug
}

# Execute main function
main "$@";exit 
# Do not remove exit , its used to ensure 
# nothing after this is parsed

